var whiz = (function() { var h = 1, y = {}, o = {}, l = {}, d = { "class": "className" }, b = /^(?:(?:([-]?\d*)(n{1}))?([-+]?\d*)|(odd|even))$/, x = /((?:[_a-zA-Z][\w-]*)|\*)|(?:#([\w-]+))|(?:\.([\w-]+))|(?:\[([a-z]+\w*)+([~\|\^\$\*!]?=)?['"]?([^\]]*?)["']?\])|(?::([\-\w]+)(?:\(['"]?(.+?)["']?\))*)|(?:\s*((?:[>+~\s,])|$)\s*)/g; (function() { var E = document.createElement("div"), F = (new Date()).getTime(); E.innerHTML = '<a name="' + F + '" class="€ b"></a>'; o.qsa = !!(E.querySelectorAll && E.querySelectorAll(".€").length) })(); var B = (window.ActiveXObject) ? function(E) { return (E.$whizUid || (E.$whizUid = [h++]))[0] } : function(E) { return E.$whizUid || (E.$whizUid = h++) }; function D(F) { var E = B(F); return (y[E]) ? null : (y[E] = true) } function u(E) { return true } function e(E) { return E.replace(/[-.*+?^${}()|[\]\/\\]/g, "\\$&") } function p(E) { return { combinator: E || " ", tag: "*", id: null, classes: [], attributes: [], pseudos: []} } function w(H) { if (l[H]) { return l[H] } var G = [], K = [], E, F, J, I = sli = ci = ai = pi = 0; E = p(); x.lastIndex = 0; while (F = x.exec(H)) { if (F[1]) { E.tag = F[1].toUpperCase() } else { if (F[2]) { E.id = F[2] } else { if (F[3]) { E.classes[ci++] = F[3] } else { if (F[4]) { E.attributes[ai++] = { key: F[4], op: F[5], value: F[6]} } else { if (F[7]) { E.pseudos[pi++] = { key: F[7], value: F[8]} } else { if (F[9]) { K[I++] = E; if (F[9] == ",") { G[sli++] = K; K = []; I = 0; J = null } else { J = F[9] } E = p(J); ci = ai = pi = 0 } else { break } } } } } } } K[I++] = E; G[sli++] = K; return l[H] = G } var z = { " ": function(F, G, I, K) { var H, L, J = 0, E = I.length; H = G.getElementsByTagName(F); if (K) { while (L = H[J++]) { L.nodeType == 1 && K(L) && (I[E++] = L) } } else { while (L = H[J++]) { L.nodeType == 1 && (I[E++] = L) } } return I }, ">": function(F, G, I) { var H, K, J = 0, E = I.length; H = G.getElementsByTagName(F); while (K = H[J++]) { K.parentNode == G && (I[E++] = K) } return I }, "+": function(F, G, H, I) { var E = H.length; while (G = G.nextSibling) { if (G.nodeType == 1) { G.tagName == F && I(G) && (H[E++] = G); break } } return H }, "~": function(F, G, H, I) { var E = H.length; while (G = G.nextSibling) { if (G.nodeType == 1) { if (!I(G)) { break } G.tagName == F && (H[E++] = G) } } return H } }; var j = { " ": function(F, E) { while (F = F.parentNode) { if (F == E) { return true } } return false }, ">": function(F, E) { return F.parentNode == E }, "+": function(F, E) { while (F = F.previousSibling) { if (F.nodeType != 1) { continue } if (F == E) { return true } else { if (F.tagName == F.tagName) { return false } } } return false }, "~": function(F, E) { while (n = n.previousSibling) { if (n == E) { return true } } return false } }; var i = { "=": function(E) { return E }, "~=": function(E) { return new RegExp("(?:^|\\s+)" + e(E) + "(?:\\s+|$)") }, "!=": function(E) { return E }, "^=": function(E) { return new RegExp("^" + e(E)) }, "$=": function(E) { return new RegExp(e(E) + "$") }, "*=": function(E) { return new RegExp(e(E)) }, "|=": function(E) { return new RegExp("^" + e(E) + "-?") } }; var r = { "=": function(E, F) { return E == F }, "~=": function(E, F) { return F.test(E) }, "!=": function(E, F) { return E != F }, "^=": function(E, F) { return F.test(E) }, "$=": function(E, F) { return F.test(E) }, "*=": function(E, F) { return F.test(E) }, "|=": function(E, F) { return F.test(E) } }; var q = {}, s = {}; function t(H) { if (q[H]) { return q[H] } var F, G, E; F = H.match(b); switch (F[4]) { case "even": G = 2; E = 0; break; case "odd": G = 2; E = 1; break; default: G = parseInt(F[1], 10); G = isNaN(G) ? (F[2] ? 1 : 0) : G; E = parseInt(F[3], 10); isNaN(E) && (E = 0); break } return (q[H] = { a: G, b: E }) } function g(F, J, L, M) { var I, G, K, E, H = 1; I = B(F); G = B(F.parentNode); E = s[G] || (s[G] = {}); if (!E[I]) { while ((F = F[L])) { if (F.nodeType != 1 || (M && F.tagName != M)) { continue } K = E[B(F)]; if (K) { H = K + H; break } H++ } E[I] = H } return J.a ? E[I] % J.a == J.b : J.b == E[I] } function v(H, E) { var G = H; while ((G = G.previousSibling)) { if (G.nodeType === 1 && (!E || G.tagName == E)) { return false } } var F = H; while ((F = F.nextSibling)) { if (F.nodeType === 1 && (!E || F.tagName == E)) { return false } } return true } var c = { root: function(E) { return E === E.ownerDocument.documentElement }, "nth-child": function(F, E) { return (E.a == 1 && !E.b) ? true : g(F, E, "previousSibling", false) }, "nth-last-child": function(F, E) { return (E.a == 1 && !E.b) ? true : g(F, E, "previousSibling", false) }, "nth-of-type": function(F, E) { return g(F, E, "previousSibling", F.tagName) }, "nth-last-of-type": function(F, E) { return g(F, E, "nextSibling", F.tagName) }, "first-child": function(F) { var E = F.parentNode.firstChild; while (E.nodeType != 1) { E = E.nextSibling } return F === E }, "last-child": function(E) { while ((E = E.nextSibling)) { if (E.nodeType === 1) { return false } } return true }, "first-of-type": function(G) { var F = G.parentNode.firstChild, E = G.tagName; while (F.nodeType != 1 || F.tagName != E) { F = F.nextSibling } return G === F }, "last-of-type": function(F) { var E = F.tagName; while ((F = F.nextSibling)) { if (F.nodeType == 1 && F.tagName == E) { return false } } return true }, "only-child": function(E) { return v(E) }, "only-of-type": function(E) { return v(E, E.tagName) }, empty: function(E) { return !E.firstChild }, parent: function(E) { return !!E.firstChild }, enabled: function() { return node.disabled === false && node.type !== "hidden" }, disabled: function() { return node.disabled === true }, checked: function(E) { return E.checked === true }, selected: function(E) { E.parentNode.selectedIndex; return E.selected === true }, visible: function(E) { return E.offsetWidth > 0 || E.offsetHeight > 0 }, hidden: function(E) { return E.offsetWidth === 0 || E.offsetHeight === 0 }, not: function(E, F) { return !a(E, F) }, contains: function(F, E) { return E.test(F.innerText || F.textContent || "") }, odd: function(E) { return }, even: function(E) { return } }; c.nth = c["nth-child"]; c.index = c["nth-child"]; var A = { t: function(E) { return w(E) }, n: function(E) { return new RegExp(e(E)) }, h: function(E) { return t(E) } }; var m = { klass: function(E, F) { var K, H = 0, G = [], I = 0, J; J = new RegExp("(?:^|\\s+)" + e(F) + "(?:\\s+|$)"); while (K = E[H++]) { J.test(K.className) && (G[I++] = K) } return G }, attribute: function(F, J) { var G, H = 0, I = [], E = 0, L, M = d[J.key] || J.key, K = /^(?:src|href|action)$/.test(M) ? 2 : 0; if (J.op) { L = i[J.op](J.value); while (G = F[H++]) { r[J.op](G[M] || G.getAttribute(M, K), L) && (I[E++] = G) } } else { while (G = F[H++]) { ((G[M] || G.getAttribute(M, K)) != null) && (I[E++] = G) } } return I }, pseudo: function(F, G) { var E = G.value, J = G.key, L, I = 0, H = [], K = 0; E && (E = A[J.charAt(2)](E)); while (L = F[I++]) { c[J](L, E) && (H[K++] = L) } return H } }; function C(I, K) { var M = [], N, L = 0, P, R = D, F = I.combinator, E = I.id, Q = I.tag, H = I.classes, J = I.attributes, O = I.pseudos; if (E) { var G = document.getElementById(E); if (Q == "*" || G.tagName == Q) { while (cxt = K[L++]) { if (j[F](G, cxt)) { M = [G]; break } } } } else { if (Q) { L = 0; y = {}; if (K.length == 1) { R = false } while (cxt = K[L++]) { M = z[F](Q, cxt, M, R) } } } if (H.length > (L = 0)) { while (P = H[L++]) { M = m.klass(M, P) } } if (J.length > (L = 0)) { while (P = J[L++]) { M = m.attribute(M, P) } } if (O.length > (L = 0)) { while (P = O[L++]) { M = m.pseudo(M, P) } } return M } function k(G, H) { var F = 0, E; y = {}; s = {}; while (E = G[F++]) { H = C(E, H) } return H } function f(E, J) { var H = [], G = 0, I, F = w(E); while (I = F[G++]) { if (H.length > 0) { H = k(I, J).concat(H) } else { H = k(I, J) } } return H } function a(J, F) { var H = 0, I, G, K, E; F = F[0][0]; if (F.id && F.id != J.id) { return false } if (F.classes.length > (H = 0)) { while (I = F.classes[H++]) { if (!(new RegExp("(?:^|\\s+)" + e(I) + "(?:\\s+|$)")).test(J.className)) { return false } } } if (F.attributes.length > (H = 0)) { while (I = F.attributes[H++]) { G = d[I.key]; E = /^(?:src|href|action)$/.test(G) ? 2 : 0; G = J[G] || J.getAttribute(G, E); if (I.op) { if (!r[I.op](G, i[I.op](I.value))) { return false } } else { if (G == null) { return false } } } } if (F.pseudos.length > (H = 0)) { while (I = F.pseudos[H++]) { (K = I.value) && (K = A[I.key.charAt(2)](K)); if (!c[I.key](J, K)) { return false } } } return true } return function(E, F) { if (!E || typeof E !== "string") { return [] } F = F || document; if (F.nodeType !== 1 && F.nodeType !== 9) { return [] } if (o.qsa) { try { return F.querySelectorAll(E) } catch (G) { return f(E, [F]) } } else { return f(E, [F]) } } })();